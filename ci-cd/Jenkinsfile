#!/usr/bin/env groovy
/**
 * Jenkinsfile - Sistema de Inventario y Ventas
 * Automatiza el build, infraestructura y despliegue en AWS.
 */

pipeline {
  agent any
  options { timestamps() }

  parameters {
    choice(name: 'ENVIRONMENT', choices: ['staging','prod'], description: 'Entorno')
    string(name: 'TFSTATE_BUCKET', defaultValue: 'mc-terraform-state', description: 'Bucket backend Terraform')
    string(name: 'TFSTATE_LOCK_TABLE', defaultValue: 'mc-terraform-locks', description: 'Tabla DynamoDB para locks')
  }

  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
  }

  stages {
    stage('Build Frontend') {
      steps {
        sh 'npm ci'
        sh 'npm run build'
      }
    }

    stage('Backend Deps') {
      steps {
        sh '''
          docker run --rm \
            -v "$PWD/src/backend:/var/task" \
            -w /var/task \
            public.ecr.aws/lambda/nodejs:22 \
            /bin/sh -c "npm ci --omit=dev"
        '''
      }
    }

    stage('Terraform Init & Plan') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          dir('infrastructure/terraform') {
            sh 'terraform fmt -recursive'
            sh '''
              terraform init \
                -backend-config="bucket=${TFSTATE_BUCKET}" \
                -backend-config="key=envs/${ENVIRONMENT}/terraform.tfstate" \
                -backend-config="region=${AWS_DEFAULT_REGION}" \
                -backend-config="dynamodb_table=${TFSTATE_LOCK_TABLE}" \
                -backend-config="encrypt=true"
            '''
            sh 'terraform workspace select ${ENVIRONMENT} || terraform workspace new ${ENVIRONMENT}'
            sh 'terraform validate'
            sh 'terraform plan -var="environment=${ENVIRONMENT}" -out="tfplan-${ENVIRONMENT}.bin" -no-color'
          }
        }
      }
    }

    stage('Terraform Apply (staging)') {
      when { expression { params.ENVIRONMENT == 'staging' } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          timeout(time: 10, unit: 'MINUTES') {
            input message: '¿Aplicar cambios a STAGING?', ok: 'Aplicar'
          }
          dir('infrastructure/terraform') {
            sh 'terraform apply -auto-approve tfplan-${ENVIRONMENT}.bin'
          }
        }
      }
    }

    stage('Deploy to S3') {
      steps {
        sh 'bash ci-cd/deploy-frontend.sh'
      }
    }

    stage('Smoke tests') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh 'ENVIRONMENT=${ENVIRONMENT} bash ci-cd/smoke-tests.sh'
        }
      }
    }
  }

  post {
    success { echo '✅ Despliegue completado' }
    failure { echo '❌ Error en CI/CD' }
  }
}
